{"version":3,"sources":["components/ConnectButton/index.tsx","components/CpkInfo/index.tsx","utils/networks.ts","components/Transactions/index.tsx","components/SafeModules/index.tsx","components/App/index.tsx","styles/globalStyles.ts","serviceWorker.js","index.tsx"],"names":["Web3ConnectButton","styled","div","WalletConnectProvider","require","default","ConnectButton","onConnect","networkName","Button","network","providerOptions","walletconnect","package","options","infuraId","onClose","Line","TitleLine","CpkInfo","walletState","size","strong","networkId","1","2","3","4","5","42","100","246","73799","getNetworkNameFromId","isSafeApp","isProxyDeployed","ownerAddress","hash","showIdenticon","showCopyBtn","showEtherscanBtn","shortenHash","cpkAddress","balance","ethDecimals","BigNumber","pow","decimalPlaces","toString","formatBalance","cpkBalance","Transactions","cpk","useState","txHash","setTxHash","showTxError","setShowTxError","makeTransaction","a","txs","to","execTransactions","txResult","safeTxHash","onClick","color","variant","as","textSize","BigLine","headers","id","label","SafeModules","module","setModule","isLoading","setIsLoading","rows","setRows","getModules","useCallback","modules","newRows","map","index","cells","content","useEffect","enableModule","Promise","resolve","reject","promiEvent","then","receipt","catch","disableModule","value","onChange","e","target","length","Container","initialWalletState","undefined","txManager","tabs","icon","App","selectedTab","setSelectedTab","React","web3","setWeb3","setCpk","updateWalletState","updateCpk","address","getBalance","getNetworkId","getOwnerAccount","initializeCpk","ethLibAdapter","Web3Adapter","CPK","create","newCpk","provider","Web3","items","GlobalStyle","createGlobalStyle","avertaFont","avertaBoldFont","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","theme","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.58d9146a.chunk.js","sourcesContent":["import * as React from 'react'\nimport Web3Connect from 'web3connect'\nimport styled from 'styled-components'\nimport './styles.scss'\n\nconst Web3ConnectButton = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px;\n`\n\nconst {\n  default: WalletConnectProvider\n} = require('@walletconnect/web3-provider')\n\ntype ConnectButtonProps = {\n  onConnect: Function\n  networkName: string\n}\n\nconst ConnectButton = ({ onConnect, networkName }: ConnectButtonProps) => (\n  <Web3ConnectButton>\n    <Web3Connect.Button\n      network={networkName}\n      providerOptions={{\n        walletconnect: {\n          package: WalletConnectProvider,\n          options: {\n            infuraId: 'b42c928da8fd4c1f90374b18aa9ac6ba'\n          }\n        }\n      }}\n      onConnect={onConnect}\n      onClose={() => {}}\n    />\n  </Web3ConnectButton>\n)\n\nexport default ConnectButton\n","import { EthHashInfo, Text, Title } from '@gnosis.pm/safe-react-components'\nimport BigNumber from 'bignumber.js'\nimport { WalletState } from 'components/App'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { getNetworkNameFromId } from 'utils/networks'\n\nconst Line = styled.div`\n  display: flex;\n  align-items: center;\n  height: 40px;\n`\n\nconst TitleLine = styled.div`\n  margin-right: 10px;\n`\n\nconst formatBalance = (balance: BigNumber | undefined): string => {\n  if (!balance) {\n    return '0 ETH'\n  }\n  const ethDecimals = new BigNumber(10).pow(18)\n  return balance.div(ethDecimals).decimalPlaces(7).toString() + ' ETH'\n}\n\ninterface CpkInfoProps {\n  walletState: WalletState\n}\n\nconst CpkInfo = ({ walletState }: CpkInfoProps) => {\n  return (\n    <>\n      <Title size=\"sm\">Information</Title>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\" strong>\n            Network:\n          </Text>\n        </TitleLine>\n        <Text size=\"xl\">\n          {walletState?.networkId && getNetworkNameFromId(walletState?.networkId)}\n        </Text>\n      </Line>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\" strong>\n            Running as a:\n          </Text>\n        </TitleLine>\n        <Text size=\"xl\">\n          {walletState?.isSafeApp ? 'Safe App' : 'Standalone App'}\n        </Text>\n      </Line>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\" strong>\n            State of the Proxy:\n          </Text>\n        </TitleLine>\n        <Text size=\"xl\">\n          {walletState?.isProxyDeployed ? 'Deployed' : 'Not deployed'}\n        </Text>\n      </Line>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\" strong>\n            Owner address:\n          </Text>\n        </TitleLine>\n        {walletState?.ownerAddress && (\n          <EthHashInfo\n            hash={walletState?.ownerAddress}\n            showIdenticon\n            showCopyBtn\n            showEtherscanBtn\n            shortenHash={4}\n          />\n        )}\n      </Line>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\" strong>\n            CPK address:\n          </Text>\n        </TitleLine>\n        {walletState?.cpkAddress && (\n          <EthHashInfo\n            hash={walletState?.cpkAddress}\n            showIdenticon\n            showCopyBtn\n            showEtherscanBtn\n            shortenHash={4}\n          />\n        )}\n      </Line>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\" strong>\n            CPK Balance:\n          </Text>\n        </TitleLine>\n        <Text size=\"xl\">{formatBalance(walletState?.cpkBalance)}</Text>\n      </Line>\n    </>\n  )\n}\n\nexport default CpkInfo\n","type Networks = {\n  [key: number]: string\n}\n\nexport const getNetworkNameFromId = (networkId?: number): string | undefined => {\n  if (!networkId) return\n  const networks: Networks = {\n    1: 'Mainnet',\n    2: 'Morden',\n    3: 'Ropsten',\n    4: 'Rinkeby',\n    5: 'Goerli',\n    42: 'Kovan',\n    100: 'xDai',\n    246: 'Energy Web Chain',\n    73799: 'Volta (Energy Web Chain)'\n  }\n  return networks[networkId]\n}\n","import React, { useState } from 'react'\nimport CPK from 'contract-proxy-kit'\nimport styled from 'styled-components'\nimport {\n  Button,\n  EthHashInfo,\n  Text,\n  Title\n} from '@gnosis.pm/safe-react-components'\nimport { WalletState } from 'components/App'\n\nconst Line = styled.div`\n  display: flex;\n  align-items: center;\n  height: 40px;\n`\n\nconst TitleLine = styled.div`\n  margin-right: 10px;\n`\n\ninterface TransactionsProps {\n  cpk: CPK\n  walletState: WalletState\n}\n\nconst Transactions = ({ cpk, walletState }: TransactionsProps) => {\n  const [txHash, setTxHash] = useState<string>('')\n  const [showTxError, setShowTxError] = useState<boolean>(false)\n\n  const makeTransaction = async (): Promise<void> => {\n    if (!walletState.ownerAddress) return\n    setShowTxError(false)\n    setTxHash('')\n    const txs = [\n      {\n        to: walletState.ownerAddress\n      }\n    ]\n    try {\n      const txResult = await cpk.execTransactions(txs)\n      const hash = walletState.isSafeApp ? txResult.safeTxHash : txResult.hash\n      if (hash) {\n        setTxHash(hash)\n      }\n    } catch (e) {\n      setShowTxError(true)\n    }\n  }\n\n  return (\n    <>\n      <Title size=\"sm\">Transactions</Title>\n      <Line>\n        <Button\n          onClick={makeTransaction}\n          size=\"md\"\n          color=\"primary\"\n          variant=\"contained\"\n        >\n          Send empty tx to the CPK owner\n        </Button>\n      </Line>\n      {showTxError && (\n        <Line>\n          <Text size=\"xl\" color=\"error\">\n            Transaction rejected\n          </Text>\n        </Line>\n      )}\n      {txHash && (\n        <Line>\n          <TitleLine>\n            <Text size=\"xl\" as=\"span\" strong>\n              {walletState.isSafeApp\n                ? 'Safe transaction hash:'\n                : 'Transaction hash:'}\n            </Text>\n          </TitleLine>\n          <EthHashInfo\n            hash={txHash}\n            textSize=\"xl\"\n            shortenHash={8}\n            showCopyBtn\n          />\n        </Line>\n      )}\n    </>\n  )\n}\n\nexport default Transactions\n","import React, { useCallback, useEffect, useState } from 'react'\nimport CPK from 'contract-proxy-kit'\nimport styled from 'styled-components'\nimport {\n  Button,\n  Card,\n  EthHashInfo,\n  Loader,\n  Table,\n  TableHeader,\n  TableRow,\n  Text,\n  TextField,\n  Title\n} from '@gnosis.pm/safe-react-components'\nimport { WalletState } from 'components/App'\n\nconst Line = styled.div`\n  display: flex;\n  align-items: center;\n  height: 40px;\n`\n\nconst TitleLine = styled.div`\n  margin-right: 10px;\n`\n\nconst BigLine = styled.div`\n  margin: 10px 0;\n`\n\ninterface SafeModulesProps {\n  cpk: CPK\n  walletState: WalletState\n}\n\nconst headers: TableHeader[] = [\n  {\n    id: '1',\n    label: 'Enabled modules'\n  }\n]\n\nconst SafeModules = ({ cpk, walletState }: SafeModulesProps) => {\n  const [module, setModule] = useState<string>('')\n  const [txHash, setTxHash] = useState<string>('')\n  const [showTxError, setShowTxError] = useState<boolean>(false)\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [rows, setRows] = useState<TableRow[]>([])\n\n  const getModules = useCallback(async () => {\n    let modules: string[] = []\n    try {\n      modules = await cpk.getModules()\n      const newRows: TableRow[] = modules.map((module, index) => ({\n        id: index.toString(),\n        cells: [{ content: module }]\n      }))\n      setRows(newRows)\n    } catch (e) {\n\n    }\n  }, [cpk])\n\n  useEffect(() => {\n    getModules()\n  }, [getModules])\n\n  const enableModule = async (): Promise<void> => {\n    if (!module) return\n    setShowTxError(false)\n    setTxHash('')\n    try {\n      // Remove any type when TransactionResult type is updated\n      const txResult: any = await cpk.enableModule(module)\n      const hash = walletState.isSafeApp ? txResult.safeTxHash : txResult.hash\n      if (hash) {\n        setTxHash(hash)\n      }\n      setIsLoading(true)\n      await new Promise((resolve, reject) =>\n        txResult.promiEvent\n          ?.then((receipt: any) => resolve(receipt))\n          .catch(reject)\n      )\n      await getModules()\n    } catch (e) {\n      setShowTxError(true)\n    }\n    setIsLoading(false)\n  }\n\n  const disableModule = async (): Promise<void> => {\n    if (!module) return\n    setShowTxError(false)\n    setTxHash('')\n    try {\n      // Remove any type when TransactionResult type is updated\n      const txResult: any = await cpk.disableModule(module)\n      const hash = walletState.isSafeApp ? txResult.safeTxHash : txResult.hash\n      if (hash) {\n        setTxHash(hash)\n      }\n      setIsLoading(true)\n      await new Promise((resolve, reject) =>\n        txResult.promiEvent\n          ?.then((receipt: any) => resolve(receipt))\n          .catch(reject)\n      )\n      await getModules()\n    } catch (e) {\n      setShowTxError(true)\n    }\n    setIsLoading(false)\n  }\n\n  return (\n    <>\n      <Title size=\"sm\">Safe modules</Title>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\">Test with this module on Rinkeby:</Text>\n        </TitleLine>\n        <EthHashInfo\n          hash=\"0x33A458E072b182152Bb30243f29585a82c45A22b\"\n          textSize=\"xl\"\n          showCopyBtn\n        />\n      </Line>\n      <BigLine>\n        <TextField\n          id=\"standard-name\"\n          label=\"Module Address\"\n          value={module}\n          onChange={(e) => setModule(e.target.value)}\n        />\n      </BigLine>\n      <Line>\n        <Button\n          onClick={enableModule}\n          size=\"md\"\n          color=\"primary\"\n          variant=\"contained\"\n        >\n          Enable module\n        </Button>\n      </Line>\n      <Line>\n        <Button\n          onClick={disableModule}\n          size=\"md\"\n          color=\"primary\"\n          variant=\"contained\"\n        >\n          Disable module\n        </Button>\n      </Line>\n      {showTxError && (\n        <Line>\n          <Text size=\"xl\" color=\"error\">\n            Transaction rejected\n          </Text>\n        </Line>\n      )}\n      {txHash && (\n        <Line>\n          <TitleLine>\n            <Text size=\"xl\" as=\"span\" strong>\n              {walletState.isSafeApp\n                ? 'Safe transaction hash:'\n                : 'Transaction hash:'}\n            </Text>\n          </TitleLine>\n          <EthHashInfo\n            hash={txHash}\n            textSize=\"xl\"\n            shortenHash={8}\n            showCopyBtn\n          />\n        </Line>\n      )}\n      {isLoading ? (\n        <BigLine>\n          <Card>\n            <Loader size=\"sm\" />\n          </Card>\n        </BigLine>\n      ) : (\n        <BigLine>\n          {rows.length > 0 ? (\n            <Table headers={headers} rows={rows} />\n          ) : (\n            <Card>\n              <Text size=\"xl\">No modules enabled</Text>\n            </Card>\n          )}\n        </BigLine>\n      )}\n    </>\n  )\n}\n\nexport default SafeModules\n","import React, { useState, useEffect, useCallback } from 'react'\nimport CPK, { Web3Adapter, TransactionManagerConfig } from 'contract-proxy-kit'\nimport Web3 from 'web3'\nimport styled from 'styled-components'\nimport { BigNumber } from 'bignumber.js'\nimport { Title, TabItem, Tab } from '@gnosis.pm/safe-react-components'\nimport ConnectButton from '../ConnectButton'\nimport CpkInfo from 'components/CpkInfo'\nimport Transactions from 'components/Transactions'\nimport SafeModules from 'components/SafeModules'\n\nconst Container = styled.div`\n  padding: 10px;\n`\n\nconst Line = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nexport interface WalletState {\n  isSafeApp?: boolean\n  isProxyDeployed?: boolean\n  cpkAddress?: string\n  cpkBalance?: BigNumber\n  networkId?: number\n  ownerAddress?: string\n  txManager?: TransactionManagerConfig\n}\n\nconst initialWalletState = {\n  isSafeApp: undefined,\n  isProxyDeployed: undefined,\n  cpkAddress: undefined,\n  cpkBalance: undefined,\n  networkId: undefined,\n  ownerAddress: undefined,\n  txManager: undefined\n}\n\nconst tabs: TabItem[] = [\n  {\n    id: '1',\n    label: 'CPK Info',\n    icon: 'info'\n  },\n  {\n    id: '2',\n    label: 'CPK Transactions',\n    icon: 'transactionsInactive'\n  },\n  {\n    id: '3',\n    label: 'CPK Modules',\n    icon: 'apps'\n  }\n]\n\nconst App = () => {\n  const [selectedTab, setSelectedTab] = useState('1')\n  const [web3, setWeb3] = React.useState<Web3 | undefined>(undefined)\n  const [cpk, setCpk] = useState<CPK | undefined>(undefined)\n  const [walletState, updateWalletState] = useState<WalletState>(\n    initialWalletState\n  )\n  const network = 'rinkeby'\n\n  const onWeb3Connect = (provider: any) => {\n    if (provider) {\n      setWeb3(new Web3(provider))\n    }\n  }\n\n  const updateCpk = useCallback(async (): Promise<void> => {\n    if (!cpk) return\n    updateWalletState({\n      isSafeApp: cpk.isSafeApp(),\n      isProxyDeployed: await cpk.isProxyDeployed(),\n      cpkAddress: cpk.address,\n      cpkBalance: await cpk.getBalance(),\n      networkId: await cpk.getNetworkId(),\n      ownerAddress: await cpk.getOwnerAccount()\n    })\n  }, [cpk])\n\n  const initializeCpk = useCallback(async (): Promise<void> => {\n    if (!web3) return\n    const ethLibAdapter = new Web3Adapter({ web3 })\n    const newCpk = await CPK.create({ ethLibAdapter })\n    setCpk(newCpk)\n  }, [web3])\n\n  useEffect(() => {\n    initializeCpk()\n  }, [initializeCpk])\n\n  useEffect(() => {\n    updateCpk()\n  }, [updateCpk])\n\n  return (\n    <Container>\n      <Line>\n        <Title size=\"sm\">Contract Proxy Kit Configuration</Title>\n      </Line>\n      <ConnectButton onConnect={onWeb3Connect} networkName={network} />\n      {cpk && (\n        <>\n          <Tab\n            onChange={setSelectedTab}\n            selectedTab={selectedTab}\n            variant=\"outlined\"\n            items={tabs}\n          />\n          {selectedTab === '1' && <CpkInfo walletState={walletState} />}\n          {selectedTab === '2' && (\n            <Transactions cpk={cpk} walletState={walletState} />\n          )}\n          {selectedTab === '3' && (\n            <SafeModules cpk={cpk} walletState={walletState} />\n          )}\n        </>\n      )}\n    </Container>\n  )\n}\n\nexport default App\n","import { createGlobalStyle } from 'styled-components'\nimport avertaFont from '@gnosis.pm/safe-react-components/dist/fonts/averta-normal.woff2'\nimport avertaBoldFont from '@gnosis.pm/safe-react-components/dist/fonts/averta-bold.woff2'\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  html, body {\n    margin: 0;\n    padding: 0;\n  }\n\n  body {\n    padding: 10px;\n  }\n\n  @font-face {\n    font-family: 'Averta';\n    font-display: swap;\n    src: local('Averta'), local('Averta Bold'),\n    url(${avertaFont}) format('woff2'),\n    url(${avertaBoldFont}) format('woff');\n  }\n`\n\nexport default GlobalStyle\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ThemeProvider } from 'styled-components'\nimport { theme } from '@gnosis.pm/safe-react-components'\nimport App from './components/App'\nimport GlobalStyle from 'styles/globalStyles'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}