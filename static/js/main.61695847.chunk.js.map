{"version":3,"sources":["components/ConnectButton/index.tsx","components/CpkInfo/index.tsx","components/Transactions/index.tsx","components/SafeModules/index.tsx","components/App/index.tsx","styles/globalStyles.ts","serviceWorker.js","index.tsx"],"names":["Web3ConnectButton","styled","div","WalletConnectProvider","require","default","ConnectButton","onConnect","networkName","Button","network","providerOptions","walletconnect","package","options","infuraId","onClose","Line","TitleLine","CpkInfo","walletState","size","strong","isSafeApp","isProxyDeployed","ownerAddress","hash","showIdenticon","showCopyBtn","showEtherscanBtn","shortenHash","cpkAddress","cpkBalance","Transactions","cpk","useState","txHash","setTxHash","showTxError","setShowTxError","makeTransaction","a","txs","to","execTransactions","txResult","safeTxHash","onClick","color","variant","as","textSize","BigLine","headers","id","label","SafeModules","module","setModule","isLoading","setIsLoading","rows","setRows","getModules","useCallback","modules","newRows","map","index","toString","cells","content","useEffect","enableModule","Promise","resolve","reject","promiEvent","then","receipt","catch","disableModule","value","onChange","e","target","length","Container","initialWalletState","undefined","txManager","tabs","icon","App","selectedTab","setSelectedTab","React","web3","setWeb3","setCpk","updateWalletState","getEthBalance","address","BigNumber","eth","getBalance","ethBalance","ethDecimals","pow","decimalPlaces","updateCpk","getOwnerAccount","initializeCpk","ethLibAdapter","Web3Adapter","CPK","create","newCpk","provider","Web3","items","GlobalStyle","createGlobalStyle","avertaFont","avertaBoldFont","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","theme","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.61695847.chunk.js","sourcesContent":["import * as React from 'react'\nimport Web3Connect from 'web3connect'\nimport styled from 'styled-components'\nimport './styles.scss'\n\nconst Web3ConnectButton = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px;\n`\n\nconst {\n  default: WalletConnectProvider\n} = require('@walletconnect/web3-provider')\n\ntype ConnectButtonProps = {\n  onConnect: Function\n  networkName: string\n}\n\nconst ConnectButton = ({ onConnect, networkName }: ConnectButtonProps) => (\n  <Web3ConnectButton>\n    <Web3Connect.Button\n      network={networkName}\n      providerOptions={{\n        walletconnect: {\n          package: WalletConnectProvider,\n          options: {\n            infuraId: 'b42c928da8fd4c1f90374b18aa9ac6ba'\n          }\n        }\n      }}\n      onConnect={onConnect}\n      onClose={() => {}}\n    />\n  </Web3ConnectButton>\n)\n\nexport default ConnectButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { EthHashInfo, Text, Title } from '@gnosis.pm/safe-react-components'\nimport { WalletState } from 'components/App'\n\nconst Line = styled.div`\n  display: flex;\n  align-items: center;\n  height: 40px;\n`\n\nconst TitleLine = styled.div`\n  margin-right: 10px;\n`\n\ninterface CpkInfoProps {\n  walletState: WalletState\n}\n\nconst CpkInfo = ({ walletState }: CpkInfoProps) => {\n  return (\n    <>\n      <Title size=\"sm\">Information</Title>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\" strong>\n            Running as a:\n          </Text>\n        </TitleLine>\n        <Text size=\"xl\">\n          {walletState?.isSafeApp ? 'Safe App' : 'Standalone App'}\n        </Text>\n      </Line>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\" strong>\n            State of the Proxy:\n          </Text>\n        </TitleLine>\n        <Text size=\"xl\">\n          {walletState?.isProxyDeployed ? 'Deployed' : 'Not deployed'}\n        </Text>\n      </Line>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\" strong>\n            Owner address:\n          </Text>\n        </TitleLine>\n        {walletState?.ownerAddress && (\n          <EthHashInfo\n            hash={walletState?.ownerAddress}\n            showIdenticon\n            showCopyBtn\n            showEtherscanBtn\n            shortenHash={4}\n          />\n        )}\n      </Line>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\" strong>\n            CPK address:\n          </Text>\n        </TitleLine>\n        {walletState?.cpkAddress && (\n          <EthHashInfo\n            hash={walletState?.cpkAddress}\n            showIdenticon\n            showCopyBtn\n            showEtherscanBtn\n            shortenHash={4}\n          />\n        )}\n      </Line>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\" strong>\n            CPK Balance:\n          </Text>\n        </TitleLine>\n        <Text size=\"xl\">{walletState?.cpkBalance}</Text>\n      </Line>\n    </>\n  )\n}\n\nexport default CpkInfo\n","import React, { useState } from 'react'\nimport CPK from 'contract-proxy-kit'\nimport styled from 'styled-components'\nimport {\n  Button,\n  EthHashInfo,\n  Text,\n  Title\n} from '@gnosis.pm/safe-react-components'\nimport { WalletState } from 'components/App'\n\nconst Line = styled.div`\n  display: flex;\n  align-items: center;\n  height: 40px;\n`\n\nconst TitleLine = styled.div`\n  margin-right: 10px;\n`\n\ninterface TransactionsProps {\n  cpk: CPK\n  walletState: WalletState\n}\n\nconst Transactions = ({ cpk, walletState }: TransactionsProps) => {\n  const [txHash, setTxHash] = useState<string>('')\n  const [showTxError, setShowTxError] = useState<boolean>(false)\n\n  const makeTransaction = async (): Promise<void> => {\n    if (!walletState.ownerAddress) return\n    setShowTxError(false)\n    setTxHash('')\n    const txs = [\n      {\n        to: walletState.ownerAddress\n      }\n    ]\n    try {\n      const txResult = await cpk.execTransactions(txs)\n      const hash = walletState.isSafeApp ? txResult.safeTxHash : txResult.hash\n      if (hash) {\n        setTxHash(hash)\n      }\n    } catch (e) {\n      setShowTxError(true)\n    }\n  }\n\n  return (\n    <>\n      <Title size=\"sm\">Transactions</Title>\n      <Line>\n        <Button\n          onClick={makeTransaction}\n          size=\"md\"\n          color=\"primary\"\n          variant=\"contained\"\n        >\n          Send empty tx to the CPK owner\n        </Button>\n      </Line>\n      {showTxError && (\n        <Line>\n          <Text size=\"xl\" color=\"error\">\n            Transaction rejected\n          </Text>\n        </Line>\n      )}\n      {txHash && (\n        <Line>\n          <TitleLine>\n            <Text size=\"xl\" as=\"span\" strong>\n              {walletState.isSafeApp\n                ? 'Safe transaction hash:'\n                : 'Transaction hash:'}\n            </Text>\n          </TitleLine>\n          <EthHashInfo\n            hash={txHash}\n            textSize=\"xl\"\n            shortenHash={8}\n            showCopyBtn\n          />\n        </Line>\n      )}\n    </>\n  )\n}\n\nexport default Transactions\n","import React, { useCallback, useEffect, useState } from 'react'\nimport CPK from 'contract-proxy-kit'\nimport styled from 'styled-components'\nimport {\n  Button,\n  Card,\n  EthHashInfo,\n  Loader,\n  Table,\n  TableHeader,\n  TableRow,\n  Text,\n  TextField,\n  Title\n} from '@gnosis.pm/safe-react-components'\nimport { WalletState } from 'components/App'\n\nconst Line = styled.div`\n  display: flex;\n  align-items: center;\n  height: 40px;\n`\n\nconst TitleLine = styled.div`\n  margin-right: 10px;\n`\n\nconst BigLine = styled.div`\n  margin: 10px 0;\n`\n\ninterface SafeModulesProps {\n  cpk: CPK\n  walletState: WalletState\n}\n\nconst headers: TableHeader[] = [\n  {\n    id: '1',\n    label: 'Enabled modules'\n  }\n]\n\nconst SafeModules = ({ cpk, walletState }: SafeModulesProps) => {\n  const [module, setModule] = useState<string>('')\n  const [txHash, setTxHash] = useState<string>('')\n  const [showTxError, setShowTxError] = useState<boolean>(false)\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [rows, setRows] = useState<TableRow[]>([])\n\n  const getModules = useCallback(async () => {\n    const modules = await cpk.getModules()\n    const newRows: TableRow[] = modules.map((module, index) => ({\n      id: index.toString(),\n      cells: [{ content: module }]\n    }))\n    setRows(newRows)\n  }, [cpk])\n\n  useEffect(() => {\n    getModules()\n  }, [getModules])\n\n  const enableModule = async (): Promise<void> => {\n    if (!module) return\n    setShowTxError(false)\n    setTxHash('')\n    try {\n      // Remove any type when TransactionResult type is updated\n      const txResult: any = await cpk.enableModule(module)\n      const hash = walletState.isSafeApp ? txResult.safeTxHash : txResult.hash\n      if (hash) {\n        setTxHash(hash)\n      }\n      setIsLoading(true)\n      await new Promise((resolve, reject) =>\n        txResult.promiEvent\n          ?.then((receipt: any) => resolve(receipt))\n          .catch(reject)\n      )\n      await getModules()\n    } catch (e) {\n      setShowTxError(true)\n    }\n    setIsLoading(false)\n  }\n\n  const disableModule = async (): Promise<void> => {\n    if (!module) return\n    setShowTxError(false)\n    setTxHash('')\n    try {\n      // Remove any type when TransactionResult type is updated\n      const txResult: any = await cpk.disableModule(module)\n      const hash = walletState.isSafeApp ? txResult.safeTxHash : txResult.hash\n      if (hash) {\n        setTxHash(hash)\n      }\n      setIsLoading(true)\n      await new Promise((resolve, reject) =>\n        txResult.promiEvent\n          ?.then((receipt: any) => resolve(receipt))\n          .catch(reject)\n      )\n      await getModules()\n    } catch (e) {\n      setShowTxError(true)\n    }\n    setIsLoading(false)\n  }\n\n  return (\n    <>\n      <Title size=\"sm\">Safe modules</Title>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\">Test with this module on Rinkeby:</Text>\n        </TitleLine>\n        <EthHashInfo\n          hash=\"0x33A458E072b182152Bb30243f29585a82c45A22b\"\n          textSize=\"xl\"\n          showCopyBtn\n        />\n      </Line>\n      <BigLine>\n        <TextField\n          id=\"standard-name\"\n          label=\"Module Address\"\n          value={module}\n          onChange={(e) => setModule(e.target.value)}\n        />\n      </BigLine>\n      <Line>\n        <Button\n          onClick={enableModule}\n          size=\"md\"\n          color=\"primary\"\n          variant=\"contained\"\n        >\n          Enable module\n        </Button>\n      </Line>\n      <Line>\n        <Button\n          onClick={disableModule}\n          size=\"md\"\n          color=\"primary\"\n          variant=\"contained\"\n        >\n          Disable module\n        </Button>\n      </Line>\n      {showTxError && (\n        <Line>\n          <Text size=\"xl\" color=\"error\">\n            Transaction rejected\n          </Text>\n        </Line>\n      )}\n      {txHash && (\n        <Line>\n          <TitleLine>\n            <Text size=\"xl\" as=\"span\" strong>\n              {walletState.isSafeApp\n                ? 'Safe transaction hash:'\n                : 'Transaction hash:'}\n            </Text>\n          </TitleLine>\n          <EthHashInfo\n            hash={txHash}\n            textSize=\"xl\"\n            shortenHash={8}\n            showCopyBtn\n          />\n        </Line>\n      )}\n      {isLoading ? (\n        <BigLine>\n          <Card>\n            <Loader size=\"sm\" />\n          </Card>\n        </BigLine>\n      ) : (\n        <BigLine>\n          {rows.length > 0 ? (\n            <Table headers={headers} rows={rows} />\n          ) : (\n            <Card>\n              <Text size=\"xl\">No modules enabled</Text>\n            </Card>\n          )}\n        </BigLine>\n      )}\n    </>\n  )\n}\n\nexport default SafeModules\n","import React, { useState, useEffect, useCallback } from 'react'\nimport CPK, { Web3Adapter, TransactionManagerConfig } from 'contract-proxy-kit'\nimport Web3 from 'web3'\nimport styled from 'styled-components'\nimport { BigNumber } from 'bignumber.js'\nimport { Title, TabItem, Tab } from '@gnosis.pm/safe-react-components'\nimport ConnectButton from '../ConnectButton'\nimport CpkInfo from 'components/CpkInfo'\nimport Transactions from 'components/Transactions'\nimport SafeModules from 'components/SafeModules'\n\nconst Container = styled.div`\n  padding: 10px;\n`\n\nconst Line = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nexport interface WalletState {\n  isSafeApp?: boolean\n  isProxyDeployed?: boolean\n  cpkAddress?: string\n  cpkBalance?: string\n  ownerAddress?: string\n  txManager?: TransactionManagerConfig\n}\n\nconst initialWalletState = {\n  isSafeApp: undefined,\n  isProxyDeployed: undefined,\n  cpkAddress: undefined,\n  cpkBalance: undefined,\n  ownerAddress: undefined,\n  txManager: undefined\n}\n\nconst tabs: TabItem[] = [\n  {\n    id: '1',\n    label: 'CPK Info',\n    icon: 'info'\n  },\n  {\n    id: '2',\n    label: 'CPK Transactions',\n    icon: 'transactionsInactive'\n  },\n  {\n    id: '3',\n    label: 'CPK Modules',\n    icon: 'apps'\n  }\n]\n\nconst App = () => {\n  const [selectedTab, setSelectedTab] = useState('1')\n  const [web3, setWeb3] = React.useState<Web3 | undefined>(undefined)\n  const [cpk, setCpk] = useState<CPK | undefined>(undefined)\n  const [walletState, updateWalletState] = useState<WalletState>(\n    initialWalletState\n  )\n  const network = 'rinkeby'\n\n  const onWeb3Connect = (provider: any) => {\n    if (provider) {\n      setWeb3(new Web3(provider))\n    }\n  }\n\n  const getEthBalance = useCallback(\n    async (address?: string): Promise<string | undefined> => {\n      if (!web3 || !address) return\n      const ethBalance = new BigNumber(await web3.eth.getBalance(address))\n      const ethDecimals = new BigNumber(10).pow(18)\n      return (\n        web3 && ethBalance.div(ethDecimals).decimalPlaces(7).toString() + ' ETH'\n      )\n    },\n    [web3]\n  )\n\n  const updateCpk = useCallback(async (): Promise<void> => {\n    if (!cpk) return\n    updateWalletState({\n      isSafeApp: cpk.isSafeApp(),\n      isProxyDeployed: await cpk.isProxyDeployed(),\n      cpkAddress: cpk.address,\n      cpkBalance: await getEthBalance(cpk.address),\n      ownerAddress: await cpk.getOwnerAccount()\n    })\n  }, [cpk, getEthBalance])\n\n  const initializeCpk = useCallback(async (): Promise<void> => {\n    if (!web3) return\n    const ethLibAdapter = new Web3Adapter({ web3 })\n    const newCpk = await CPK.create({ ethLibAdapter })\n    setCpk(newCpk)\n  }, [web3])\n\n  useEffect(() => {\n    initializeCpk()\n  }, [initializeCpk])\n\n  useEffect(() => {\n    updateCpk()\n  }, [updateCpk])\n\n  return (\n    <Container>\n      <Line>\n        <Title size=\"sm\">Contract Proxy Kit Configuration</Title>\n      </Line>\n      <ConnectButton onConnect={onWeb3Connect} networkName={network} />\n      {cpk && (\n        <>\n          <Tab\n            onChange={setSelectedTab}\n            selectedTab={selectedTab}\n            variant=\"outlined\"\n            items={tabs}\n          />\n          {selectedTab === '1' && <CpkInfo walletState={walletState} />}\n          {selectedTab === '2' && (\n            <Transactions cpk={cpk} walletState={walletState} />\n          )}\n          {selectedTab === '3' && (\n            <SafeModules cpk={cpk} walletState={walletState} />\n          )}\n        </>\n      )}\n    </Container>\n  )\n}\n\nexport default App\n","import { createGlobalStyle } from 'styled-components'\nimport avertaFont from '@gnosis.pm/safe-react-components/dist/fonts/averta-normal.woff2'\nimport avertaBoldFont from '@gnosis.pm/safe-react-components/dist/fonts/averta-bold.woff2'\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  html, body {\n    margin: 0;\n    padding: 0;\n  }\n\n  body {\n    padding: 10px;\n  }\n\n  @font-face {\n    font-family: 'Averta';\n    font-display: swap;\n    src: local('Averta'), local('Averta Bold'),\n    url(${avertaFont}) format('woff2'),\n    url(${avertaBoldFont}) format('woff');\n  }\n`\n\nexport default GlobalStyle\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ThemeProvider } from 'styled-components'\nimport { theme } from '@gnosis.pm/safe-react-components'\nimport App from './components/App'\nimport GlobalStyle from 'styles/globalStyles'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}